var searchIndex = JSON.parse('{\
"rust_socketio":{"doc":"Adds a layer of abstraction over Udpack to provide secure …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Socket","SocketIO","accept","borrow","borrow","borrow_mut","borrow_mut","close","connect","fmt","from","from","into","into","new","ping","read","shutdown","shutdown","try_from","try_from","try_into","try_into","type_id","type_id","uuid","vzip","vzip","writable","write"],"q":["rust_socketio","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Adds a layer of abstraction over Transport to provide …","Adds a layer of abstraction over Udpack to provide secure …","accept a socket instance that constructed from a transport.","","","","","drain the socket","connect to the dest address and return the socket instance …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","construct a instance of SocketIO with the bind address, …","send a ping and expected a pong","Decode and decrypt bytes from the received frame, and will …","shutdown the socket","shutdown all sockets.","","","","","","","uuid of the socket instance","","","Whether the socket is writable or not.","Write and encrypt bytes to one frame, and send the frame …"],"i":[0,0,1,2,1,2,1,2,1,1,2,1,2,1,1,2,2,2,1,2,1,2,1,2,1,2,2,1,2,2],"f":[null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6]],[[["",0],["str",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["tosocketaddrs",8]]],[[["",0]],["result",6]],[[["",0]]],[[["",0]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["u64",0]],[[]],[[]],[[["",0]]],[[["",0],["bytes",3]]]],"p":[[3,"SocketIO"],[3,"Socket"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};